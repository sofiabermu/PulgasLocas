/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pulgaslocas.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.Timer;
import pulgaslocas.models.Garden;
import pulgaslocas.models.Misil;
import pulgaslocas.models.Pistola;

/**
 * Panel principal del juego donde se representa gráficamente el jardín y
 * las pulgas. Captura eventos de teclado y ratón para permitir la interacción
 * del usuario, y ejecuta un ciclo de actualización mediante un temporizador.
 * 
 * 
 * @author sofia bermudez
 * @version 1.0.0
 * @since 07052025
 */
public class GameWindow extends javax.swing.JPanel {

    private Garden garden;
    private Pistola pistola;
    private Misil misil;
    private Timer gameTimer;
    private boolean gameRunning = true;
    
    /**
     * Constructor del panel del juego. Inicializa los componentes y configura la lógica.
     */
    
    public GameWindow() {
        initComponents();
        setupGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Configura el entorno del juego: tamaño, fondo, armas, eventos y temporizador.
     */
    
    private void setupGame() {
        // Configurar tamaño y color de fondo
        setPreferredSize(new Dimension(800, 600));
        setBackground(Color.WHITE);
        
        // Inicializar el jardín y las armas
        garden = new Garden(0, 0, 600, 800);
        pistola = new Pistola();
        misil = new Misil();
        
        // Configurar key listener para las teclas
        setFocusable(true);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                handleKeyPress(e);
            }
        });
        
        // Configurar mouse listener para disparar la pistola
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) { // Clic izquierdo
                    pistola.usar(garden, e.getX(), e.getY());
                    repaint();
                }
            }
        });
        
        // Iniciar el timer para actualizar el juego (60 FPS)
        gameTimer = new Timer(16, e -> {
            if (gameRunning) {
                garden.refresh();
                repaint();
            }
        });
        gameTimer.start();
    }
    
     /**
     * Maneja los eventos de teclado y ejecuta acciones según la tecla presionada.
     * 
     * @param e Evento de teclado
     */
    
    private void handleKeyPress(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_P:
                // Agregar pulga normal
                garden.agregarPulgaNormal();
                break;
            case KeyEvent.VK_M:
                // Agregar pulga mutante
                garden.agregarPulgaMutante();
                break;
            case KeyEvent.VK_S:
                // Hacer saltar a todas las pulgas
                garden.hacerSaltarPulgas();
                break;
            case KeyEvent.VK_Q:
                // Terminar simulación
                endGame();
                break;
            case KeyEvent.VK_SPACE:
                // Activar misil
                misil.usar(garden, 0, 0); // Las coordenadas no importan para el misil
                break;
        }
        repaint();
    }
    
    /**
     * Detiene el juego, detiene el temporizador y muestra mensaje de fin.
     */
    
    private void endGame() {
        gameRunning = false;
        garden.detenerJuego();
        gameTimer.stop();
        System.out.println("Juego terminado por el usuario.");
    }
    
    /**
     * Dibuja todos los elementos del juego sobre el panel, incluyendo el jardín,
     * puntajes y mensaje final si el juego ha terminado.
     *
     * @param g Contexto gráfico donde se dibujan los elementos.
     */
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        garden.paint(g);

        g.setColor(Color.BLACK);
        g.drawString("Pulgas Normales: " + garden.getPulgasNormales().size(), 10, 20);
        g.drawString("Pulgas Mutantes: " + garden.getPulgasMutantes().size(), 10, 40);
        g.drawString("Puntaje: " + garden.getPuntaje(), 10, 60);
        g.drawString("Puntaje maximo: " + garden.getPuntajeMaximo(), 10, 80);

        if (!gameRunning) {
            g.setColor(Color.RED);
            g.drawString("JUEGO TERMINADO", getWidth() / 2 - 60, getHeight() / 2);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
