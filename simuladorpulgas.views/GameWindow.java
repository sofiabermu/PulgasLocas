/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package simuladorpulgas.views;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import simuladorpulgas.elements.GraphicContainer;
import simuladorpulgas.elements.SpriteContainer;
import simuladorpulgas.models.Arma;
import simuladorpulgas.models.ContenedorPulgas;
import simuladorpulgas.models.Garden;
import simuladorpulgas.models.GeneradorPulgas;
import simuladorpulgas.models.Misil;
import simuladorpulgas.models.Pistola;
import simuladorpulgas.models.PulgaMutante;
import simuladorpulgas.models.PulgaNormal;

/**
 *
 * @author SOFIA RUDAS
 */
public class GameWindow extends javax.swing.JPanel implements GraphicContainer, KeyListener, MouseListener {

    private SpriteContainer container;
    protected Garden garden;
    private GeneradorPulgas generador;
    private Arma armaActual = new Pistola();
    
    public GameWindow() {
        setPreferredSize(new Dimension(800, 600));
        container = new ContenedorPulgas(0, 0, 800, 600);

        // Ahora pasas los parámetros correctos para Garden
        garden = new Garden(0, 0, 600, 800);  // Cambiado para pasar los parámetros adecuados

        setLayout(new BorderLayout());
        add(garden, BorderLayout.CENTER); // Agregar garden al layout

        setFocusable(true);
        addKeyListener(this);
        requestFocusInWindow();
        addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
    }//GEN-LAST:event_formKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) { // Clic izquierdo
            armaActual.usar(garden, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_formMouseClicked
    
    public void setGarden(Garden garden) {
        this.garden = garden;
    }
    
    private void iniciarGenerador() {
        GeneradorPulgas generador = new GeneradorPulgas(garden);
        Thread t = new Thread(generador);
        t.start();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        container.paint(g);  
    }
     
    @Override
    public void refresh() {
        repaint();
    }

    @Override
    public Rectangle getBoundaries() {
        return new Rectangle(0, 0, getWidth(), getHeight());
    }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
    }
    
    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch(e.getKeyCode()) {
            case KeyEvent.VK_Q:
                garden.terminarGenerador();
                if (generador != null) {
                    generador.detener();
                }
                break;

            case KeyEvent.VK_P:
                PulgaNormal pn = new PulgaNormal(garden.aleatorioX(), garden.aleatorioY(), 20);
                pn.setGraphicContainer(this); 
                container.add(pn);            
                garden.agregarPulgaNormal();      
                break;

            case KeyEvent.VK_M:
                PulgaMutante pm = new PulgaMutante(garden.aleatorioX(), garden.aleatorioY(), 20);
                pm.setGraphicContainer(this);
                container.add(pm);
                garden.agregarPulgaMutante();
                break;

            case KeyEvent.VK_S:
                garden.saltarPulgas();
                break;

            case KeyEvent.VK_SPACE:
                new Misil().usar(garden, 0, 0);
                break;
        }
        this.refresh(); 
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
